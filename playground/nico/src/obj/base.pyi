from typing import (
	Dict,
	Callable,
	Iterable,
	Optional,
	Final,
	Any
)
from abc import ABC, abstractmethod


class ObjInsts(list, ABC):
	@abstractmethod
	def __init__(self, iterable:Optional[Iterable['Obj']])->None: ...
	def add(self, obj:'Obj')->None: ...
	def __getitem__(self, inst_id:Any)->Any: ...

class ObjInstsUpdate(ObjInsts):
	@abstractmethod
	def __init__(self, iterable:Optional[Iterable['ObjUpdate']])->None: ...
	def update(self)->None: ...

class ObjInstsUpdateCon(ObjInstsUpdate):
	@abstractmethod
	def __init__(self, iterable:Optional[Iterable['ObjUpdate']])->None: ...
	def update(self)->None: ...

class ObjInstsStaticR(ObjInsts):
	OBJ_CLASS:Final[type]
	@abstractmethod
	def __init__(self, iterable:Optional[Iterable['ObjStaticR']])->None: ...
	def load(self, inst_id:int)->"ObjStaticR": ...

class ObjInstsStaticRW(ObjInstsStaticR):
	@abstractmethod
	def __init__(self, iterable:Optional[Iterable['ObjStaticRW']])->None: ...
	def save(self, inst_id:int, obj:Dict[str, Any])->None: ...


class Table(tuple):
	def __init__(self, iterable:Optional[Iterable[ObjInsts]])->None: ...

# Variable global para contener las clases de objetos (filas)
# y sus intancias (columnas) con el fin de que estas se comuniquen.
TABLE:Final[Table]

class Pipeline(tuple):
	def __init__(self, iterable:Optional[ObjInstsUpdate]): ...
	def update(self): ...

# Variable global para contener las clases de objetos actualizables
# (filas) y sus intancias (columnas) con el fin de actualizarlos en
# el orden en que se situan en el pipeline.
PIPILINE:Final[Pipeline]

class Obj(ABC):
	CLASS_ID:Final[int]
	INST_ID:Final[int]
	@abstractmethod
	def __init__(self, INST_ID:int)->None: ...
	def __eq__(self, value:Any)->bool: ...
	def __ge__(self, value:Any)->bool: ...
	def __gt__(self, value:Any)->bool: ...
	def __le__(self, value:Any)->bool: ...
	def __lt__(self, value:Any)->bool: ...
	def __hash__(self)->int: ...

class ObjUpdate(Obj):
	@abstractmethod
	def __init__(self, INST_ID:int)->None: ...
	@abstractmethod
	def update(self): ...

class ObjDynamic(Obj):
	@abstractmethod
	def __init__(self)->None: ...

class ObjStaticR(Obj):
	@abstractmethod
	def __init__(self, INST_ID:int)->None: ...
	def load(cls, inst_id)->ObjStaticR: ...

class ObjStaticRW(ObjStaticR):
	@abstractmethod
	def __init__(self, INST_ID:int)->None: ...
	def save(self, obj)->None: ...
