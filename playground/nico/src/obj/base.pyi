from typing import (
	Dict,
	List,
	Tuple,
	Callable,
	Iterable,
	Iterator,
	Optional,
	Final,
	Any,
	TypeVar,
	Generic,
	Union,
	SupportsIndex,
	overload,
	Type
)
from abc import ABC, abstractmethod
import pygame as pg


class ObjNotFoundError(ValueError):
	def __init__(
		self,
		objType:Union[Type[Obj], str],
		objHash:int
	)->None: ...

class Obj(ABC):
	GRPS_TABLE:Final[GroupsTable]#staticattr
	TYPE:Final[Type["Obj"]]
	HASH:Final[int]
	FATHR_HASH:Final[int]
	active:bool
	@abstractmethod
	def __init__(self, HASH:int, FATHR_HASH:int)->None: ...
	def close(self)->None: ...
	def __eq__(self, value:Any)->bool: ...
	def __ge__(self, value:Any)->bool: ...
	def __gt__(self, value:Any)->bool: ...
	def __le__(self, value:Any)->bool: ...
	def __lt__(self, value:Any)->bool: ...
	def __hash__(self)->int: ...

class ObjUpdate(Obj):
	UPDT_PL:Final[UpdatingPipeline]#staticattr
	UPDT_POS:Final[int]#classattr
	@classmethod
	def setUPDT_POS(cls, DRAW_LAYER:int)->None: ...
	@abstractmethod
	def __init__(self, HASH:int, FATHR_HASH:int)->None: ...
	@abstractmethod
	def update(self): ...

class ObjDraw(Obj):
	DRAW_PL:Final[DrawingPipeline]#staticattr
	DRAW_LAYER:Final[int]#classattr
	image:pg.Surface
	rect:pg.Rect
	_BCKGND:Final[pg.Surface]
	@classmethod
	def setDRAW_LAYER(cls, DRAW_LAYER:int)->None: ...
	@abstractmethod
	def __init__(
		self,
		HASH:int,
		FATHR_HASH:int,
		image:pg.Surface,
		rect:pg.Rect
	)->None: ...
	def draw(self)->None: ...

class ObjDynamic(Obj):
	@abstractmethod
	def __init__(self, FATHR_HASH:int)->None: ...

class ObjStaticR(Obj):
	GRP_FILE:Final[str]#classattr
	@classmethod
	def setGRP_FILE(cls, GRP_FILE:str)->None: ...
	@abstractmethod
	def __init__(self, HASH:int, FATHR_HASH:int)->None: ...
	@classmethod
	def load(cls, HASH:int, FATHR_HASH:int)->ObjStaticR: ...

class ObjStaticRW(ObjStaticR):
	SAVE_GRPS:Final[SavingGroups]
	@staticmethod
	def setSAVE_GRPS(SAVE_GRPS:SavingGroups)->None: ...
	@abstractmethod
	def __init__(self, HASH:int, FATHR_HASH:int)->None: ...
	@classmethod
	def load(cls, HASH:int, FATHR_HASH:int)->ObjStaticRW: ...
	def save(self)->None: ...
	def _save(self, **obj:Any)->None: ...



T = TypeVar("T")
class Group(Generic[T]):
	_OBJS:List[T]
	TYPE:Type[T]
	@abstractmethod
	def __init__(self, TYPE:Type[T])->None: ...
	def add(self, obj:T)->None: ...
	@overload
	def __getitem__(self, objHash:SupportsIndex)->T: ...
	@overload
	def __getitem__(self, objHash:slice)->List[T]: ...
	def __delitem__(self, objHash:Union[SupportsIndex, slice])->None: ...
	def __iter__(self)->Iterator[T]:
	def __str__(self)->str: ...
	def __repr__(self)->str: ...



class GroupNotFoundError(ValueError):
	def __init__(self, objType:Union[Type[Obj], str])->None: ...

class GroupsTable:
	def __init__(self)->None: ...
	def add(self, group:Group[Obj])->None: ...
	def __getitem__(
		self,
		objType:Union[Type[Obj], str]
	)->Group[Obj]: ...
	def __str__(self)->str: ...
	def __repr__(self)->str: ...

class UpdatingPipeline:
	def __init__(self)->None: ...
	def add(self, group:Group[Obj])->None: ...
	def update(self)->None: ...
	def __str__(self)->str: ...
	def __repr__(self)->str: ...

class DrawingPipeline:
	def __init__(self)->None: ...
	def add(self, group:Group[Obj])->None: ...
	def draw(self)->None: ...
	def __str__(self)->str: ...
	def __repr__(self)->str: ...

class SavingGroups:
	def __init__(self)->None: ...
	def add(self, group:Group[Obj])->None: ...
	def save(self)->None: ...
	def __str__(self)->str: ...
	def __repr__(self)->str: ...


# High level interface

def addGroup(group:Group[Obj])->None: ...

def getGroup(objType:Union[Type[Obj], str])->Group[Obj]: ...

def update()->None: ...

def draw()->None: ...

def load(
	objType:Union[Type[Obj], str],
	objHash:int,
	fathrHash:int
)->Union[ObjStaticR, ObjStaticRW]: ...

def save()->None: ...

def close()->None: ...
